#!/usr/bin/python

import os
import csv
import glob
import argparse
from datetime import datetime
import pytz


def process_file(file):
    processed_data = []
    # Append headers
    processed_data.append(["first_name", "last_name", "price", "above_100"])

    with open(file, "r") as cur_file:
        for i, (name, price) in enumerate(csv.reader(cur_file, delimiter=",")):
            # Check that name field is not empty
            if len(name.strip(" ")) > 0 and i > 0:
                # Get first name and last name
                name_parts = name.split(" ")
                if len(name_parts) == 3:
                    _, first_name, last_name = name_parts
                elif len(name_parts) == 2:
                    first_name, last_name = name_parts
                else:
                    first_name = name_parts
                    last_name = ""

                # Removes prepended "0"s
                price = round(float(price), 2)
                # Boolean field "above_100"
                above_100 = True if price > 100 else False
                processed_data.append([first_name, last_name, price, above_100])

    return processed_data


def get_datetime():
    # get system date time with locale awareness
    sys_date = datetime.now().astimezone(pytz.timezone("Asia/Singapore"))
    # convert system date time object to string
    cur_sysdate = (str(sys_date))
    # Format string
    date, time = cur_sysdate.split(" ")
    time = time.split(".")[0]  # Remove fraction of a second
    time = time.replace(":", "-")  # Replace colons to acceptable filename separators

    return date + "_" + time


if __name__ == "__main__":
    default_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), "data")

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', dest='src_dir', help='Input directory',
                        metavar='STR', default=os.path.join(default_dir, "raw"))
    parser.add_argument('-o', dest='out_dir', help='Output directory', metavar='STR',
                        default=os.path.join(default_dir, "processed"))

    (opt_args, args) = parser.parse_known_args()

    # Get files
    files = glob.glob(os.path.join(opt_args.src_dir, "*"))
    # Check existence and create output folder
    if not os.path.isdir(opt_args.out_dir):
        os.mkdir(opt_args.out_dir)

    # Process files
    for cur_file in files:
        file_name = cur_file.split(os.path.sep)[-1]
        file_name = get_datetime() + "_" + file_name
        out_file = os.path.join(opt_args.out_dir, file_name)
        with open(out_file, "w", newline='') as output_file:
            writer = csv.writer(output_file, delimiter=",")
            writer.writerows(process_file(cur_file))
            output_file.close()

        print("Cleaned %s and saved to %s." % (cur_file, out_file))
